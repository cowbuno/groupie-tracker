package main

import (
	"encoding/json"
	"log"
	"net/http"
	"time"
)

var client *http.Client

type Artist struct {
	Id           int      `json:"id"`
	ImageURL     string   `json:"image"`
	Name         string   `json:"name"`
	Members      []string `json:"members"`
	CreationDate int      `json:"creationDate"`
	FirstAlbum   string   `json:"firstAlbum"`
	Location     []string
	Dates        []string
	Relation     map[string][]string

	ResponseLocation     string `json:"location"`     //for the parcing
	ResponseConcertDates string `json:"concertDates"` //for the parcing
	ResponseRelations    string `json:"relations"`    //for the parcing
}

func GetJson(url string, target interface{}) error {
	resp, err := client.Get(url)
	if err != nil {
		return nil
	}
	defer resp.Body.Close()

	return json.NewDecoder(resp.Body).Decode(target)
}

func GetArtists() *[]Artist {
	url := "https://groupietrackers.herokuapp.com/api/artists"

	var artists []Artist
	err := GetJson(url, &artists)
	if err != nil {
		log.Fatal(err)
	} else {
		return &artists
	}

	return nil
}

func GetLocationByUrl(url string) []string {

	type Location struct {
		Id        int      `json:"id"`
		Locations []string `json:"locations"`
	}

	var location Location
	err := GetJson(url, &location)
	if err != nil {
		log.Fatal(err)
	} else {
		return location.Locations
	}

	return nil
}

func GetDatesByUrl(url string) []string {

	type Date struct {
		Id    int      `json:"id"`
		Dates []string `json:"dates"`
	}

	var date Date
	err := GetJson(url, &date)
	if err != nil {
		log.Fatal(err)
	} else {
		return date.Dates
	}

	return nil
}

func GetRelationByUrl(url string) map[string][]string {
	type Relation struct {
		Id             int                 `json:"id"`
		DatesLocations map[string][]string `json:"datesLocations"`
	}

	var relation Relation
	err := GetJson(url, &relation)
	if err != nil {
		log.Fatal(err)
	} else {
		return relation.DatesLocations
	}

	return nil
}

func main() {
	client = &http.Client{Timeout: 10 * time.Second}
	artists := GetArtists()

	for i := range *artists {
		artist := &(*artists)[i]
		if artist.ResponseLocation != "" {
			artist.Location = GetLocationByUrl(artist.ResponseLocation)
		}
		if artist.ResponseConcertDates != "" {
			artist.Dates = GetDatesByUrl(artist.ResponseConcertDates)
		}

		if artist.ResponseRelations != "" {
			artist.Relation = GetRelationByUrl(artist.ResponseRelations)
		}
	}
}
